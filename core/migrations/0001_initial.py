# Generated by Django 5.2.6 on 2025-09-10 20:32

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "organization_type",
                    models.CharField(
                        choices=[
                            ("personal", "Personal Account"),
                            ("business", "Business"),
                            ("enterprise", "Enterprise"),
                            ("non_profit", "Non-Profit"),
                            ("educational", "Educational"),
                            ("government", "Government"),
                        ],
                        default="business",
                        max_length=20,
                    ),
                ),
                (
                    "time_format_24h",
                    models.BooleanField(
                        default=True, help_text="Use 24-hour time format"
                    ),
                ),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "codename",
                    models.CharField(
                        help_text="Unique permission identifier (e.g., 'workflow.create')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable permission name", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="What this permission allows users to do"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("workflow", "Workflow Management"),
                            ("workitem", "Work Item Management"),
                            ("team", "Team Management"),
                            ("user", "User Management"),
                            ("booking", "Booking Management"),
                            ("reporting", "Reporting & Analytics"),
                            ("system", "System Administration"),
                            ("custom", "Custom Permissions"),
                        ],
                        default="custom",
                        max_length=20,
                    ),
                ),
                (
                    "service",
                    models.CharField(
                        default="core",
                        help_text="Which service this permission belongs to",
                        max_length=50,
                    ),
                ),
                (
                    "is_global",
                    models.BooleanField(
                        default=False,
                        help_text="Can this permission affect the entire organization?",
                    ),
                ),
                (
                    "requires_resource",
                    models.BooleanField(
                        default=False,
                        help_text="Does this permission require a specific resource?",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["category", "name"],
                "indexes": [
                    models.Index(
                        fields=["category", "service"],
                        name="core_permis_categor_390a4e_idx",
                    ),
                    models.Index(
                        fields=["codename"], name="core_permis_codenam_1da12d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Role name (e.g., 'Project Manager', 'Team Lead')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this role does"
                    ),
                ),
                (
                    "role_type",
                    models.CharField(
                        choices=[("system", "System Role"), ("custom", "Custom Role")],
                        default="custom",
                        max_length=20,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6B7280",
                        help_text="Hex color for visual identification",
                        max_length=7,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Assign this role to new organization members",
                    ),
                ),
                (
                    "max_users",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum users that can have this role",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "inherits_from",
                    models.ForeignKey(
                        blank=True,
                        help_text="Inherit permissions from another role",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_roles",
                        to="core.role",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["organization", "name"],
            },
        ),
        migrations.CreateModel(
            name="RolePermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Limit permission to specific resource instance",
                        null=True,
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional conditions for permission (time, location, etc.)",
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_assignments",
                        to="core.permission",
                    ),
                ),
                (
                    "resource_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Limit permission to specific resource type",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_assignments",
                        to="core.role",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="role",
            name="permissions",
            field=models.ManyToManyField(
                related_name="roles",
                through="core.RolePermission",
                to="core.permission",
            ),
        ),
        migrations.CreateModel(
            name="SystemConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=100, unique=True)),
                ("value", models.TextField()),
                (
                    "value_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("boolean", "Boolean"),
                            ("json", "JSON"),
                            ("float", "Float"),
                        ],
                        default="string",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("category", models.CharField(default="general", max_length=50)),
                (
                    "is_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this setting contains sensitive data",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["category", "key"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=100)),
                ("department", models.CharField(blank=True, max_length=100)),
                ("location", models.CharField(blank=True, max_length=200)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("bio", models.TextField(blank=True)),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("mobile", models.CharField(blank=True, max_length=20)),
                ("is_organization_admin", models.BooleanField(default=False)),
                ("has_staff_panel_access", models.BooleanField(default=False)),
                (
                    "can_create_organizations",
                    models.BooleanField(
                        default=False,
                        help_text="Allow user to create new organizations",
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("desktop_notifications", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="core.organization",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mediap_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["user__last_name", "user__first_name"],
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for visual identification",
                        max_length=7,
                    ),
                ),
                (
                    "default_capacity",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Default number of team members available for scheduling",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to="core.organization",
                    ),
                ),
                (
                    "parent_team",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent team - leave empty for top-level teams",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_teams",
                        to="core.team",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_teams",
                        to="core.userprofile",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_teams",
                        to="core.userprofile",
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True, related_name="teams", to="core.userprofile"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="rolepermission",
            name="granted_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="granted_permissions",
                to="core.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="role",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_roles",
                to="core.userprofile",
            ),
        ),
        migrations.CreateModel(
            name="JobType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "default_duration_hours",
                    models.DecimalField(decimal_places=2, default=1.0, max_digits=5),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for calendar/UI display",
                        max_length=7,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Category for grouping job types",
                        max_length=50,
                    ),
                ),
                (
                    "required_skills",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of required skills/qualifications",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_types",
                        to="core.organization",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_job_types",
                        to="core.userprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="CalendarEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("personal", "Personal"),
                            ("team", "Team"),
                            ("organization", "Organization"),
                            ("system", "System"),
                        ],
                        default="personal",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("location", models.CharField(blank=True, max_length=200)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("is_all_day", models.BooleanField(default=False)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                (
                    "content_type",
                    models.CharField(
                        blank=True,
                        help_text="Model type this event relates to",
                        max_length=100,
                    ),
                ),
                (
                    "object_id",
                    models.CharField(
                        blank=True, help_text="ID of the related object", max_length=100
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for calendar display",
                        max_length=7,
                    ),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_pattern",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Recurrence pattern configuration",
                    ),
                ),
                ("is_cancelled", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calendar_events",
                        to="core.organization",
                    ),
                ),
                (
                    "related_team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="team_events",
                        to="core.team",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_events",
                        to="core.userprofile",
                    ),
                ),
                (
                    "invitees",
                    models.ManyToManyField(
                        blank=True, related_name="invited_events", to="core.userprofile"
                    ),
                ),
            ],
            options={
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="UserRoleAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("resource_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this role assignment becomes active",
                        null=True,
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this role assignment expires",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Reason for assignment or additional context",
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_roles",
                        to="core.userprofile",
                    ),
                ),
                (
                    "resource_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Scope role to specific resource type (e.g., specific team)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assignments",
                        to="core.role",
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_assignments",
                        to="core.userprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("read", "Read"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("permission_granted", "Permission Granted"),
                            ("permission_revoked", "Permission Revoked"),
                            ("export", "Data Export"),
                            ("import", "Data Import"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content_type",
                    models.CharField(help_text="Model name", max_length=100),
                ),
                ("object_id", models.CharField(blank=True, max_length=100)),
                ("object_repr", models.CharField(blank=True, max_length=200)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "changes",
                    models.JSONField(
                        default=dict, help_text="Changed fields and values"
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(default=dict, help_text="Additional context data"),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="core_auditl_user_id_7b678c_idx",
                    ),
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="core_auditl_content_0feb6d_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="core_auditl_timesta_80074f_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FileUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="uploads/%Y/%m/")),
                ("original_filename", models.CharField(max_length=255)),
                ("file_size", models.BigIntegerField()),
                ("mime_type", models.CharField(max_length=100)),
                (
                    "upload_session",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Group related files"
                    ),
                ),
                ("content_type", models.CharField(blank=True, max_length=100)),
                ("object_id", models.CharField(blank=True, max_length=100)),
                ("is_processed", models.BooleanField(default=False)),
                ("processing_error", models.TextField(blank=True)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
                "indexes": [
                    models.Index(
                        fields=["uploaded_by", "uploaded_at"],
                        name="core_fileup_uploade_3e7cf9_idx",
                    ),
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="core_fileup_content_141a3e_idx",
                    ),
                    models.Index(
                        fields=["upload_session"], name="core_fileup_upload__c3a9ec_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("system", "System"),
                        ],
                        default="info",
                        max_length=20,
                    ),
                ),
                ("content_type", models.CharField(blank=True, max_length=100)),
                ("object_id", models.CharField(blank=True, max_length=100)),
                (
                    "action_url",
                    models.URLField(blank=True, help_text="URL for action button"),
                ),
                ("action_text", models.CharField(blank=True, max_length=50)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("email_sent", models.BooleanField(default=False)),
                ("email_sent_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Auto-delete after this date", null=True
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["recipient", "is_read"],
                        name="core_notifi_recipie_aeffaf_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="core_notifi_created_d0c445_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="core_notifi_expires_084cc5_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(fields=["slug"], name="core_organi_slug_517c11_idx"),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["is_active"], name="core_organi_is_acti_9518a1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["organization_type"], name="core_organi_organiz_58eb74_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="systemconfiguration",
            index=models.Index(
                fields=["category"], name="core_system_categor_c291e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(
                fields=["organization", "is_active"],
                name="core_userpr_organiz_963b82_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(fields=["user"], name="core_userpr_user_id_830b32_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="userprofile",
            unique_together={("user", "organization")},
        ),
        migrations.AddIndex(
            model_name="team",
            index=models.Index(
                fields=["organization", "is_active"],
                name="core_team_organiz_6c0e3d_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="team",
            unique_together={("organization", "name")},
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["role", "permission"], name="core_rolepe_role_id_777955_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["resource_type", "resource_id"],
                name="core_rolepe_resourc_6488c2_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rolepermission",
            unique_together={("role", "permission", "resource_type", "resource_id")},
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["organization", "is_active"],
                name="core_role_organiz_fce2e8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["organization", "is_default"],
                name="core_role_organiz_1053ba_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="role",
            unique_together={("organization", "name")},
        ),
        migrations.AddIndex(
            model_name="jobtype",
            index=models.Index(
                fields=["organization", "is_active"],
                name="core_jobtyp_organiz_5200bf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="jobtype",
            index=models.Index(
                fields=["category"], name="core_jobtyp_categor_b32392_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="jobtype",
            unique_together={("organization", "name")},
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=models.Index(
                fields=["organization", "start_time"],
                name="core_calend_organiz_512f78_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=models.Index(
                fields=["event_type", "start_time"],
                name="core_calend_event_t_e9edd7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=models.Index(
                fields=["created_by", "start_time"],
                name="core_calend_created_91de16_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="core_calend_content_d72d2e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userroleassignment",
            index=models.Index(
                fields=["user_profile", "is_active"],
                name="core_userro_user_pr_c82de9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userroleassignment",
            index=models.Index(
                fields=["role", "is_active"], name="core_userro_role_id_be2bac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userroleassignment",
            index=models.Index(
                fields=["resource_type", "resource_id"],
                name="core_userro_resourc_46bec9_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userroleassignment",
            unique_together={("user_profile", "role", "resource_type", "resource_id")},
        ),
    ]
