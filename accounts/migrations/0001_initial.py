# Generated by Django 5.2.6 on 2025-09-10 20:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "referral_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("search", "Search Engine"),
                            ("social_media", "Social Media"),
                            ("referral", "Referral"),
                            ("advertisement", "Advertisement"),
                            ("direct", "Direct Visit"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "team_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1", "Just Me"),
                            ("2-10", "2-10 people"),
                            ("11-50", "11-50 people"),
                            ("51-200", "51-200 people"),
                            ("201-500", "201-500 people"),
                            ("500+", "500+ people"),
                        ],
                        max_length=10,
                    ),
                ),
                ("job_title", models.CharField(blank=True, max_length=255)),
                ("organization_name", models.CharField(blank=True, max_length=255)),
                ("privacy_policy_accepted", models.BooleanField(default=False)),
                (
                    "privacy_policy_accepted_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("terms_accepted", models.BooleanField(default=False)),
                ("terms_accepted_date", models.DateTimeField(blank=True, null=True)),
                ("marketing_consent", models.BooleanField(default=False)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("website", models.URLField(blank=True)),
                ("is_organization_admin", models.BooleanField(default=False)),
                ("email_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                (
                    "digest_frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("never", "Never"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                ("analytics_consent", models.BooleanField(default=False)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("login_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("metatask_support", "MetaTask Support"),
                            ("metatask_admin", "MetaTask Admin"),
                            ("metatask_moderator", "MetaTask Moderator"),
                            ("metatask_editor", "MetaTask Editor"),
                            ("workflow_manager", "Workflow Manager"),
                            ("process_designer", "Process Designer"),
                            ("job_planner", "Job Planner"),
                            ("resource_manager", "Resource Manager"),
                            ("team_leader", "Team Leader"),
                            ("standard_user", "Standard User"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "service",
                    models.CharField(
                        blank=True,
                        help_text="Service this role applies to (e.g., 'cflows', 'scheduling')",
                        max_length=100,
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user", "role"], name="accounts_us_user_id_db305c_idx"
                    ),
                    models.Index(
                        fields=["service"], name="accounts_us_service_e81042_idx"
                    ),
                ],
                "unique_together": {("user", "role", "service")},
            },
        ),
    ]
