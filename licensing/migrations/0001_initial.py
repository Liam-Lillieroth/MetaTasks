# Generated by Django 5.2.6 on 2025-09-10 20:32

import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LicenseType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("personal_free", "Personal Free"),
                            ("basic", "Basic"),
                            ("professional", "Professional"),
                            ("enterprise", "Enterprise"),
                            ("custom", "Custom"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(help_text="User-friendly name", max_length=100),
                ),
                (
                    "price_monthly",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "price_yearly",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "max_users",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum users allowed, null for unlimited",
                        null=True,
                    ),
                ),
                (
                    "max_projects",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum projects allowed, null for unlimited",
                        null=True,
                    ),
                ),
                (
                    "max_workflows",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum workflows allowed, null for unlimited",
                        null=True,
                    ),
                ),
                (
                    "max_storage_gb",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum storage in GB, null for unlimited",
                        null=True,
                    ),
                ),
                (
                    "max_api_calls_per_day",
                    models.PositiveIntegerField(
                        blank=True, help_text="API rate limits", null=True
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        default=list, help_text="List of included features"
                    ),
                ),
                (
                    "restrictions",
                    models.JSONField(default=list, help_text="List of restrictions"),
                ),
                (
                    "is_personal_only",
                    models.BooleanField(
                        default=False, help_text="Available only for personal accounts"
                    ),
                ),
                (
                    "requires_organization",
                    models.BooleanField(
                        default=False, help_text="Requires organization membership"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["service", "price_monthly"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField()),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS class or icon identifier",
                        max_length=100,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#000000", help_text="Hex color code", max_length=7
                    ),
                ),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "allows_personal_free",
                    models.BooleanField(
                        default=True, help_text="Allow free personal use"
                    ),
                ),
                (
                    "personal_free_limits",
                    models.JSONField(
                        default=dict, help_text="Limits for personal free accounts"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="CustomLicense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Custom license name", max_length=200),
                ),
                (
                    "max_users",
                    models.PositiveIntegerField(
                        help_text="Maximum number of users allowed"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("start_date", models.DateTimeField()),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Leave blank for unlimited duration",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "included_features",
                    models.JSONField(
                        default=list, help_text="List of included features"
                    ),
                ),
                (
                    "restrictions",
                    models.JSONField(default=dict, help_text="Custom restrictions"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes for customer support"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Customer support user who created this",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_licenses",
                        to="core.organization",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_licenses",
                        to="licensing.service",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="License",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("personal", "Personal Account"),
                            ("organization", "Organization Account"),
                            ("customer-service", "Customer Service Account"),
                        ],
                        default="organization",
                        max_length=20,
                    ),
                ),
                (
                    "is_personal_free",
                    models.BooleanField(
                        default=False, help_text="Is this a personal free account"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("suspended", "Suspended"),
                            ("cancelled", "Cancelled"),
                            ("pending", "Pending"),
                            ("trial", "Trial"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                            ("lifetime", "Lifetime"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("trial_end_date", models.DateTimeField(blank=True, null=True)),
                ("current_users", models.PositiveIntegerField(default=0)),
                ("current_projects", models.PositiveIntegerField(default=0)),
                ("current_workflows", models.PositiveIntegerField(default=0)),
                (
                    "current_storage_gb",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("current_api_calls_today", models.PositiveIntegerField(default=0)),
                (
                    "api_calls_reset_date",
                    models.DateField(default=django.utils.timezone.now),
                ),
                ("last_billing_date", models.DateTimeField(blank=True, null=True)),
                ("next_billing_date", models.DateTimeField(blank=True, null=True)),
                (
                    "amount_paid",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "custom_license",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="license_instance",
                        to="licensing.customlicense",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="licenses",
                        to="core.organization",
                    ),
                ),
                (
                    "license_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing.licensetype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LicenseUsageLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("users_count", models.PositiveIntegerField()),
                ("projects_count", models.PositiveIntegerField()),
                ("storage_gb", models.DecimalField(decimal_places=2, max_digits=10)),
                ("api_calls", models.PositiveIntegerField(default=0)),
                ("active_sessions", models.PositiveIntegerField(default=0)),
                ("recorded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "license",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_logs",
                        to="licensing.license",
                    ),
                ),
            ],
            options={
                "ordering": ["-recorded_at"],
            },
        ),
        migrations.AddField(
            model_name="licensetype",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="license_types",
                to="licensing.service",
            ),
        ),
        migrations.CreateModel(
            name="UserLicenseAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("last_access", models.DateTimeField(blank=True, null=True)),
                ("total_sessions", models.PositiveIntegerField(default=0)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_licenses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "license",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assignments",
                        to="licensing.license",
                    ),
                ),
                (
                    "revoked_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="revoked_licenses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="license_assignments",
                        to="core.userprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LicenseAuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "License Created"),
                            ("assign", "User Assigned"),
                            ("revoke", "User Revoked"),
                            ("modify", "License Modified"),
                            ("expire", "License Expired"),
                            ("extend", "License Extended"),
                            ("suspend", "License Suspended"),
                            ("reactivate", "License Reactivated"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("old_values", models.JSONField(blank=True, default=dict)),
                ("new_values", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "affected_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.userprofile",
                    ),
                ),
                (
                    "custom_license",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="licensing.customlicense",
                    ),
                ),
                (
                    "license",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="licensing.license",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_assignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="licensing.userlicenseassignment",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="license",
            index=models.Index(
                fields=["organization", "status"], name="licensing_l_organiz_945a93_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="license",
            index=models.Index(
                fields=["end_date"], name="licensing_l_end_dat_6d239d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="license",
            index=models.Index(
                fields=["account_type", "is_personal_free"],
                name="licensing_l_account_394fef_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="license",
            unique_together={("organization", "license_type")},
        ),
        migrations.AddIndex(
            model_name="licenseusagelog",
            index=models.Index(
                fields=["license", "recorded_at"], name="licensing_l_license_84c037_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="licensetype",
            unique_together={("service", "name")},
        ),
        migrations.AddIndex(
            model_name="customlicense",
            index=models.Index(
                fields=["organization", "service", "is_active"],
                name="licensing_c_organiz_f576d7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customlicense",
            index=models.Index(
                fields=["end_date"], name="licensing_c_end_dat_c31ba6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userlicenseassignment",
            index=models.Index(
                fields=["license", "is_active"], name="licensing_u_license_699687_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userlicenseassignment",
            index=models.Index(
                fields=["user_profile", "is_active"],
                name="licensing_u_user_pr_d4bf6f_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userlicenseassignment",
            unique_together={("license", "user_profile")},
        ),
        migrations.AddIndex(
            model_name="licenseauditlog",
            index=models.Index(
                fields=["license", "timestamp"], name="licensing_l_license_06e79d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="licenseauditlog",
            index=models.Index(
                fields=["custom_license", "timestamp"],
                name="licensing_l_custom__851903_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="licenseauditlog",
            index=models.Index(
                fields=["performed_by", "timestamp"],
                name="licensing_l_perform_9d5924_idx",
            ),
        ),
    ]
